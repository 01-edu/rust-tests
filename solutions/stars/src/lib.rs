/*
## stars

### Instructions

Write a function named `stars` that takes a number as
parameter and returns a string of stars (asterisks) 2^n long (2 to the nth power).

### Expected functions

```rust
fn stars(n: u32) -> String {}
```

### Usage

Here is a program to test your function.

```rust
fn main() {
    println!("{}", stars(1));
    println!("{}", stars(4));
    println!("{}", stars(5));
}
```

And its output

```console
student@ubuntu:~/[[ROOT]]/test$ cargo run
**
****************
********************************
student@ubuntu:~/[[ROOT]]/test$
```

*/
pub fn stars(n: u32) -> String {
    let base: u32 = 2;
    let mut f = 0;
    let mut l = "".to_string();
    while f != base.pow(n) {
        l += "*";
        f += 1
    }
    return l;
}

#[cfg(test)]
mod test {
    use super::*;
    #[test]
    fn test_stars() {
        assert_eq!(stars(0), "*");
        assert_eq!(stars(1), "**");
        assert_eq!(stars(2), "****");
        assert_eq!(stars(3), "********");
        assert_eq!(stars(4), "****************");
        assert_eq!(stars(5), "********************************");
        assert_eq!(
            stars(10),

       );
    }
}
